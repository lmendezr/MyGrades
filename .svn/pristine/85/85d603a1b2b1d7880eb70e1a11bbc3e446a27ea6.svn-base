package edu.uprm.ece.icom4035.mygrades.activities;

import java.util.Locale;

import android.app.ActionBar;
import android.app.AlertDialog;
import android.app.FragmentTransaction;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentPagerAdapter;
import android.support.v4.view.ViewPager;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.Toast;
import edu.uprm.ece.icom4035.mygrades.R;
import edu.uprm.ece.icom4035.mygrades.adapters.MainStudentsListAdapter;
import edu.uprm.ece.icom4035.mygrades.adapters.MainTestsListAdapter;
import edu.uprm.ece.icom4035.mygrades.managers.GradesManager;
import edu.uprm.ece.icom4035.mygrades.managers.StudentManager;

public class MainActivity extends FragmentActivity implements
		ActionBar.TabListener {

	private static StudentManager studentManager;
	private static GradesManager gradesManager;
	private static ListView studentsListView;
	private static ListView gradesListView;
	private static MainStudentsListAdapter studentsListAdapter;
	private static MainTestsListAdapter testsListAdapter;
	// Search EditText
	private static EditText inputSearch;

	/**
	 * The {@link android.support.v4.view.PagerAdapter} that will provide
	 * fragments for each of the sections. We use a
	 * {@link android.support.v4.app.FragmentPagerAdapter} derivative, which
	 * will keep every loaded fragment in memory. If this becomes too memory
	 * intensive, it may be best to switch to a
	 * {@link android.support.v4.app.FragmentStatePagerAdapter}.
	 */
	SectionsPagerAdapter mSectionsPagerAdapter;

	/**
	 * The {@link ViewPager} that will host the section contents.
	 */
	ViewPager mViewPager;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		studentManager = new StudentManager();

		// Set up the action bar.
		final ActionBar actionBar = getActionBar();
		actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);

		// Create the adapter that will return a fragment for each of the three
		// primary sections of the app.
		mSectionsPagerAdapter = new SectionsPagerAdapter(
				getSupportFragmentManager());

		// Set up the ViewPager with the sections adapter.
		mViewPager = (ViewPager) findViewById(R.id.pager);
		mViewPager.setAdapter(mSectionsPagerAdapter);

		// When swiping between different sections, select the corresponding
		// tab. We can also use ActionBar.Tab#select() to do this if we have
		// a reference to the Tab.
		mViewPager
				.setOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener() {
					@Override
					public void onPageSelected(int position) {
						actionBar.setSelectedNavigationItem(position);
					}
				});

		// For each of the sections in the app, add a tab to the action bar.
		for (int i = 0; i < mSectionsPagerAdapter.getCount(); i++) {
			// Create a tab with text corresponding to the page title defined by
			// the adapter. Also specify this Activity object, which implements
			// the TabListener interface, as the callback (listener) for when
			// this tab is selected.
			actionBar.addTab(actionBar.newTab()
					.setText(mSectionsPagerAdapter.getPageTitle(i))
					.setTabListener(this));
		}
	}

	public void deleteAllStudents() {
		AlertDialog.Builder builder = new AlertDialog.Builder(this);
		builder.setTitle(R.string.dialog_title_delete).setMessage(
				R.string.dialog_message_delete_all_students);
		builder.setNegativeButton(R.string.dialog_deny,
				new DialogInterface.OnClickListener() {
					public void onClick(DialogInterface dialog, int id) {
						dialog.cancel();
					}
				});
		builder.setPositiveButton(R.string.dialog_affirm,
				new DialogInterface.OnClickListener() {
					public void onClick(DialogInterface dialog, int id) {
						studentManager.clearStudents();
						Toast.makeText(getApplicationContext(),
								R.string.toast_all_students_deleted,
								Toast.LENGTH_SHORT).show();
						studentsListAdapter.notifyDataSetChanged();
					}
				});
		AlertDialog alert = builder.create();
		alert.show();

	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.main_menu, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
		case R.id.action_add:
			startActivity(new Intent(getApplicationContext(), AddStudent.class));
			return true;
		case R.id.action_delete_all:
			deleteAllStudents();
			return true;
		}

		return super.onOptionsItemSelected(item);

	}

	@Override
	public void onTabSelected(ActionBar.Tab tab,
			FragmentTransaction fragmentTransaction) {
		// When the given tab is selected, switch to the corresponding page in
		// the ViewPager.
		mViewPager.setCurrentItem(tab.getPosition());
	}

	@Override
	public void onTabUnselected(ActionBar.Tab tab,
			FragmentTransaction fragmentTransaction) {
	}

	@Override
	public void onTabReselected(ActionBar.Tab tab,
			FragmentTransaction fragmentTransaction) {
	}

	/**
	 * A {@link FragmentPagerAdapter} that returns a fragment corresponding to
	 * one of the sections/tabs/pages.
	 */
	public class SectionsPagerAdapter extends FragmentPagerAdapter {

		public SectionsPagerAdapter(FragmentManager fm) {
			super(fm);
		}

		@Override
		public Fragment getItem(int position) {
			// getItem is called to instantiate the fragment for the given page.
			// Return a DummySectionFragment (defined as a static inner class
			// below) with the page number as its lone argument.
			Fragment fragment = null;
			Bundle args = new Bundle();
			switch (position) {
			case 0:
				fragment = new StudentsFragment();
				break;
			case 1:
				fragment = new StatsFragment();
				break;
			default:
				throw new IllegalAccessError();
			}
			fragment.setArguments(args);
			return fragment;
		}

		@Override
		public int getCount() {
			// Show 2 total pages.
			return 2;
		}

		@Override
		public CharSequence getPageTitle(int position) {
			Locale l = Locale.getDefault();
			switch (position) {
			case 0:
				return getString(R.string.title_student_section).toUpperCase(l);
			case 1:
				return getString(R.string.title_stats_section).toUpperCase(l);
			}
			return null;
		}
	}

	/**
	 * This fragment displays all the students currently loaded in the program.
	 * It supports operations to search and to access each of the students in
	 * the list.
	 */
	public static class StudentsFragment extends Fragment {
		/**
		 * The fragment argument representing the section number for this
		 * fragment.
		 */
		public static final String ARG_SECTION_NUMBER = "section_number";
		public static final String STUDENT_INDEX = "student_index";

		public StudentsFragment() {
		}

		@Override
		public View onCreateView(LayoutInflater inflater, ViewGroup container,
				Bundle savedInstanceState) {
			View rootView = inflater.inflate(R.layout.fragment_main_students,
					container, false);

			populateDetails(rootView);
			return rootView;
		}

		public void populateDetails(View view) {

			studentManager = new StudentManager();
			studentsListView = (ListView) view.findViewById(R.id.students_list);
			studentsListAdapter = new MainStudentsListAdapter(
					view.getContext(), studentManager.getAll());
			inputSearch = (EditText) view.findViewById(R.id.search_students);
			inputSearch.addTextChangedListener(new TextWatcher() {

				@Override
				public void onTextChanged(CharSequence cs, int arg1, int arg2,
						int arg3) {
					// When user changed the Text
					studentsListAdapter.getFilter().filter(cs);
					if (inputSearch.length() == 0) {
						populateDetails(getView());
					}
				}

				@Override
				public void beforeTextChanged(CharSequence arg0, int arg1,
						int arg2, int arg3) {
					// TODO Auto-generated method stub

				}

				@Override
				public void afterTextChanged(Editable s) {
					// TODO Auto-generated method stub

				}

			});

			studentsListView.setAdapter(studentsListAdapter);
			studentsListView
					.setOnItemClickListener(new AdapterView.OnItemClickListener() {
						@Override
						public void onItemClick(AdapterView<?> parent,
								View view, int position, long id) {
							int studentPosition = studentManager
									.getStudentPosition((int) studentsListAdapter
											.getItemId(position));
							startViewStudent(studentPosition);
						}
					});
		}

		public void startViewStudent(int studentIndex) {
			Intent intent = new Intent(getActivity(), ShowStudent.class);
			String message = ((Integer) studentIndex).toString();
			intent.putExtra(STUDENT_INDEX, message);
			startActivity(intent);
		}

		@Override
		public void onResume() {
			populateDetails(getView());
			super.onResume();
		}
	}

	/**
	 * This fragment displays all the tests currently loaded in the program. It
	 * supports operations to search and to access the stats for each test.
	 */
	public static class StatsFragment extends Fragment {
		/**
		 * The fragment argument representing the section number for this
		 * fragment.
		 */
		public static final String ARG_SECTION_NUMBER = "section_number";
		public static final String TEST_INDEX = "test_index";

		public StatsFragment() {
		}

		@Override
		public View onCreateView(LayoutInflater inflater, ViewGroup container,
				Bundle savedInstanceState) {
			View rootView = inflater.inflate(R.layout.fragment_main_stats,
					container, false);
			populateDetails(rootView);
			return rootView;
		}

		public void populateDetails(View view) {

			studentManager = new StudentManager();
			gradesManager = new GradesManager(studentManager.getAll());
			gradesListView = (ListView) view.findViewById(R.id.stats_list);
			inputSearch = (EditText) view.findViewById(R.id.search_tests);
			testsListAdapter = new MainTestsListAdapter(view.getContext(),
					gradesManager.getAll());
			inputSearch.addTextChangedListener(new TextWatcher() {

				@Override
				public void onTextChanged(CharSequence cs, int arg1, int arg2,
						int arg3) {
					// When user changed the Text
					testsListAdapter.getFilter().filter(cs);
					if (inputSearch.length() == 0) {
						populateDetails(getView());
					}
				}

				@Override
				public void beforeTextChanged(CharSequence arg0, int arg1,
						int arg2, int arg3) {
					// TODO Auto-generated method stub

				}

				@Override
				public void afterTextChanged(Editable s) {
					// TODO Auto-generated method stub

				}

			});

			gradesListView.setAdapter(testsListAdapter);
			gradesListView
					.setOnItemClickListener(new AdapterView.OnItemClickListener() {
						@Override
						public void onItemClick(AdapterView<?> parent,
								View view, int position, long id) {
							int testPosition = gradesManager
									.getTestPosition((int) testsListAdapter
											.getItemId(position));
							startViewTest(testPosition);
						}
					});
		}

		public void startViewTest(int testIndex) {
			Intent intent = new Intent(getActivity(), ShowStats.class);
			String message = ((Integer) testIndex).toString();
			intent.putExtra(TEST_INDEX, message);
			startActivity(intent);
		}

		@Override
		public void onResume() {
			populateDetails(getView());
			super.onResume();
		}

	}

}
